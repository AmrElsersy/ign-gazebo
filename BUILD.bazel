load(
    "//ign_bazel:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "//ign_bazel:generate_include_header.bzl",
    "generate_include_header",
)
load(
    "//ign_bazel:ign_export_header.bzl",
    "ign_export_header",
)
load(
    "//ign_bazel:qt.bzl",
    "qt_cc_binary",
    "qt_cc_library",
)
load(
    "//ign_msgs:ign_msg_gen.bzl",
    "get_proto_headers",
    "ign_msg_gen",
)

package(default_visibility = ["//visibility:public"])

PROJECT_NAME = "ignition-gazebo"

PROJECT_MAJOR = 4

PROJECT_MINOR = 0

PROJECT_PATCH = 0

IGN_DESIGNATION = "DOME"

CMAKE_INSTALL_PREFIX = "./ign_gazebo/"

IGN_DATA_INSTALL_DIR = "./ign_gazebo/"

IGN_LIB_INSTALL_DIR = "./ign_gazebo/"

library_location = "libignition-gazebo4-ign.so"

IGN_LIBRARY_PATH = "./ign_gazebo/"

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/ignition/gazebo/config.hh.in",
    out = "include/ignition/gazebo/config.hh",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "PROJECT_VERSION_MAJOR=%d" % PROJECT_MAJOR,
        "PROJECT_MAJOR_VERSION=%d" % PROJECT_MAJOR,
        "PROJECT_MINOR_VERSION=%d" % PROJECT_MINOR,
        "PROJECT_PATCH_VERSION=%d" % PROJECT_PATCH,
        "PROJECT_VERSION_PATCH=%d" % PROJECT_PATCH,
        "PROJECT_VERSION_MAJOR=%d" % PROJECT_MAJOR,
        "PROJECT_VERSION_MINOR=%d" % PROJECT_MINOR,
        "PROJECT_VERSION=%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR),
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "PROJECT_NAME_NO_VERSION=%s" % PROJECT_NAME,
        "PROJECT_NAME=%s" % PROJECT_NAME,
        "IGN_DESIGNATION=%s" % IGN_DESIGNATION,
        "CMAKE_INSTALL_PREFIX=%s" % CMAKE_INSTALL_PREFIX,
        "IGN_DATA_INSTALL_DIR=%s" % IGN_DATA_INSTALL_DIR,
        "IGN_LIB_INSTALL_DIR=%s" % IGN_LIB_INSTALL_DIR,
    ],
    visibility = ["//visibility:private"],
)

ign_export_header(
    name = "include/ignition/gazebo/Export.hh",
    export_base = "IGNITION_GAZEBO",
    lib_name = "ignition-gazebo",
    visibility = ["//visibility:private"],
)

public_component_headers_no_gen = glob(
    ["include/ignition/gazebo/components/*.hh"],
)

public_headers_no_gen = [
    "include/ignition/gazebo/Conversions.hh",
    "include/ignition/gazebo/EntityComponentManager.hh",
    "include/ignition/gazebo/Entity.hh",
    "include/ignition/gazebo/EventManager.hh",
    "include/ignition/gazebo/Events.hh",
    "include/ignition/gazebo/Link.hh",
    "include/ignition/gazebo/Model.hh",
    "include/ignition/gazebo/SdfEntityCreator.hh",
    "include/ignition/gazebo/ServerConfig.hh",
    "include/ignition/gazebo/Server.hh",
    "include/ignition/gazebo/System.hh",
    "include/ignition/gazebo/SystemLoader.hh",
    "include/ignition/gazebo/SystemPluginPtr.hh",
    "include/ignition/gazebo/Types.hh",
    "include/ignition/gazebo/Util.hh",
    "include/ignition/gazebo/detail/ComponentStorageBase.hh",
    "include/ignition/gazebo/detail/EntityComponentManager.hh",
    "include/ignition/gazebo/detail/View.hh",
    "include/ignition/gazebo/rendering/Events.hh",
    "include/ignition/gazebo/rendering/MarkerManager.hh",
    "include/ignition/gazebo/rendering/RenderUtil.hh",
    "include/ignition/gazebo/rendering/SceneManager.hh",
    "include/ignition/gazebo/gui/GuiRunner.hh",
    "include/ignition/gazebo/gui/TmpIface.hh",
]

private_headers = [
    "src/Barrier.hh",
    "src/ign.hh",
    "src/LevelManager.hh",
    "src/SdfGenerator.hh",
    "src/ServerPrivate.hh",
    "src/SimulationRunner.hh",
    "src/network/NetworkConfig.hh",
    "src/network/NetworkManager.hh",
    "src/network/NetworkManagerPrimary.hh",
    "src/network/NetworkManagerSecondary.hh",
    "src/network/NetworkManagerPrivate.hh",
    "src/network/NetworkRole.hh",
    "src/network/PeerInfo.hh",
    "src/network/PeerTracker.hh",
]

sources = [
    "src/Barrier.cc",
    "src/Conversions.cc",
    "src/EntityComponentManager.cc",
    "src/EventManager.cc",
    "src/ign.cc",
    "src/LevelManager.cc",
    "src/Link.cc",
    "src/Model.cc",
    "src/SdfEntityCreator.cc",
    "src/SdfGenerator.cc",
    "src/Server.cc",
    "src/ServerConfig.cc",
    "src/ServerPrivate.cc",
    "src/SimulationRunner.cc",
    "src/System.cc",
    "src/SystemLoader.cc",
    "src/Util.cc",
    "src/View.cc",
    "src/rendering/MarkerManager.cc",
    "src/rendering/RenderUtil.cc",
    "src/rendering/SceneManager.cc",
    "src/network/NetworkConfig.cc",
    "src/network/NetworkManager.cc",
    "src/network/NetworkManagerPrimary.cc",
    "src/network/NetworkManagerSecondary.cc",
    "src/network/PeerInfo.cc",
    "src/network/PeerTracker.cc",
]

test_sources = [
    "src/Barrier_TEST.cc",
    "src/ComponentFactory_TEST.cc",
    "src/Component_TEST.cc",
    "src/Conversions_TEST.cc",
    "src/EntityComponentManager_TEST.cc",
    "src/EventManager_TEST.cc",
    "src/Link_TEST.cc",
    "src/Model_TEST.cc",
    "src/SdfEntityCreator_TEST.cc",
    # "src/SdfGenerator_TEST.cc",
    # "src/Server_TEST.cc",
    "src/SimulationRunner_TEST.cc",
    "src/SystemLoader_TEST.cc",
    "src/System_TEST.cc",
    "src/Util_TEST.cc",
]

systems = [
    "air_pressure",
    "altimeter",
    "apply_joint_force",
    "battery_plugin",
    "breadcrumbs",
    "buoyancy",
    "camera_video_recorder",
    "contact",
    "detachable_joint",
    "diff_drive",
    "follow_actor",
    "imu",
    "joint_controller",
    "joint_position_controller",
    "joint_state_publisher",
    "lift_drag",
    "log",
    "logical_camera",
    "log_video_recorder",
    "magnetometer",
    "multicopter_control",
    "multicopter_motor_model",
    "performer_detector",
    "physics",
    "pose_publisher",
    "scene_broadcaster",
    "sensors",
    "thermal",
    "touch_plugin",
    "triggered_publisher",
    "user_commands",
    "velocity_control",
    "wheel_slip",
    "wind_effects",
]

protos = glob(
    ["src/msgs/*.proto"],
    exclude = ["src/msgs/performer_affinity.proto"],
)

proto_library(
    name = "performer_affinity_proto",
    srcs = ["src/msgs/performer_affinity.proto"],
    strip_import_prefix = "src/msgs",
    deps = [
        "//ign_msgs:ignmsgs_proto_public",
    ],
)

proto_library(
    name = "igngazebo_proto",
    srcs = protos,
    strip_import_prefix = "src",
    deps = [
        ":performer_affinity_proto",
        "//ign_msgs:ignmsgs_proto_public",
    ],
)

cc_proto_library(
    name = "igngazebo_proto_cc",
    deps = [
        ":igngazebo_proto",
    ],
)

generate_include_header(
    name = "gazebohh_genrule",
    out = "include/ignition/gazebo.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/gazebo/config.hh",
        "include/ignition/gazebo/Export.hh",
    ],
)

generate_include_header(
    name = "gazebo_componentshh_genrule",
    out = "include/ignition/gazebo/components/components.hh",
    hdrs = public_component_headers_no_gen,
)

public_headers = public_headers_no_gen + public_component_headers_no_gen + [
    "include/ignition/gazebo/config.hh",
    "include/ignition/gazebo/Export.hh",
    "include/ignition/gazebo.hh",
    "include/ignition/gazebo/components/components.hh",
]

cc_library(
    name = "ign_gazebo_headers",
    hdrs = private_headers + public_headers,
    includes = ["include"],
)

genrule(
    name = "resources_gen",
    srcs = [
        "src/gui/resources/gazebo.qrc",
        "src/gui/resources/GazeboDrawer.qml",
    ] + glob(["src/gui/resources/images/*"]),
    outs = [
        "qrc_gazebo.cpp",
    ],
    cmd = "cd ign_gazebo/src/gui/resources/ && qtchooser -qt=5 -run-tool=rcc --name gazebo gazebo.qrc -o qrc_gazebo.cpp && cp qrc_gazebo.cpp ../../../../$(OUTS)",
)

filegroup(
    name = "example-worlds",
    srcs = glob([
        "examples/worlds/*.sdf",
    ]),
    visibility = ["//visibility:public"],
)

qt_cc_library(
    name = "ign_gazebo_gui",
    srcs = [
        "qrc_gazebo.cpp",
        "src/gui/Gui.cc",
        "src/gui/GuiFileHandler.cc",
        "src/gui/GuiRunner.cc",
        "src/gui/PathManager.cc",
        "src/gui/TmpIface.cc",
    ],
    hdrs = [
        "include/ignition/gazebo/gui/Gui.hh",
        "include/ignition/gazebo/gui/GuiEvents.hh",
        "include/ignition/gazebo/gui/GuiRunner.hh",
        "include/ignition/gazebo/gui/GuiSystem.hh",
        "include/ignition/gazebo/gui/TmpIface.hh",
        "src/gui/GuiFileHandler.hh",
        "src/gui/PathManager.hh",
    ],
    includes = [
        "include",
        "src",
    ],
    linkopts = [],
    deps = [
        ":ign_gazebo_headers",
        "//ign_common",
        "//ign_common/profiler",
        "//ign_fuel_tools",
        "//ign_gui",
        "//ign_msgs",
        "//ign_transport",
        "//sdformat",
    ],
)

cc_binary(
    name = "libignition-gazebo4.so",
    srcs = sources + private_headers + public_headers,
    data = [
        ":example-worlds",
    ],
    includes = ["include"],
    linkopts = [
        "-Wl,-soname,libignition-gazebo4.so",
        "-ltinyxml2",
    ],
    linkshared = True,
    visibility = [],
    deps = [
        ":ign_gazebo_gui",
        ":igngazebo_proto_cc",
        "//ign_bazel:utilities",
        "//ign_common",
        "//ign_common/events",
        "//ign_common/graphics",
        "//ign_common/profiler",
        "//ign_fuel_tools",
        "//ign_gui",
        "//ign_msgs",
        "//ign_plugin",
        "//ign_plugin/loader",
        "//ign_rendering",
        "//ign_transport",
        "//sdformat",
    ],
)

cc_library(
    name = "ign_gazebo",
    srcs = [":libignition-gazebo4.so"],
    hdrs = public_headers,
    includes = ["include"],
    visibility = ["//visibility:public"],
)

[
    cc_binary(
        name = "libignition-gazebo4-%s-system.so" % system.replace("_", "-"),
        srcs = glob(
            [
                "src/systems/%s/*.cc" % system,
                "src/systems/%s/*.hh" % system,
            ],
            allow_empty = False,
        ),
        includes = ["include"],
        linkshared = True,
        visibility = ["//visibility:public"],
        deps = [
            "//ign_bazel:utilities",
            "//ign_common",
            "//ign_common/av",
            "//ign_common/events",
            "//ign_common/graphics",
            "//ign_common/profiler",
            "//ign_fuel_tools",
            "//ign_gazebo",
            "//ign_gui",
            "//ign_math/eigen3",
            "//ign_msgs",
            "//ign_physics",
            "//ign_physics:mesh",
            "//ign_physics:sdf",
            "//ign_physics/dartsim:libignition-physics-dartsim-plugin.so",
            "//ign_plugin",
            "//ign_plugin/loader",
            "//ign_plugin/register",
            "//ign_rendering",
            "//ign_sensors",
            "//ign_transport",
            "//ign_transport/log",
            "//sdformat",
        ],
    )
    for system in systems
]

[
    cc_binary(
        name = "libignition-gazebo-%s-system.so" % system.replace("_", "-"),
        srcs = glob(
            [
                "src/systems/%s/*.cc" % system,
                "src/systems/%s/*.hh" % system,
            ],
            allow_empty = False,
        ),
        includes = ["include"],
        linkshared = True,
        visibility = ["//visibility:public"],
        deps = [
            "//ign_bazel:utilities",
            "//ign_common",
            "//ign_common/av",
            "//ign_common/events",
            "//ign_common/graphics",
            "//ign_common/profiler",
            "//ign_fuel_tools",
            "//ign_gazebo",
            "//ign_gui",
            "//ign_math/eigen3",
            "//ign_msgs",
            "//ign_physics",
            "//ign_physics:mesh",
            "//ign_physics:sdf",
            "//ign_physics/dartsim:libignition-physics-dartsim-plugin.so",
            "//ign_plugin",
            "//ign_plugin/loader",
            "//ign_plugin/register",
            "//ign_rendering",
            "//ign_sensors",
            "//ign_transport",
            "//ign_transport/log",
            "//sdformat",
        ],
    )
    for system in systems
]

[
    cc_library(
        name = system,
        srcs = [
            "libignition-gazebo-%s-system.so" % system.replace("_", "-"),
            "libignition-gazebo4-%s-system.so" % system.replace("_", "-"),
        ],
        hdrs = glob(
            [
                "src/systems/%s/*.hh" % system,
            ],
            allow_empty = False,
        ),
        deps = [
            "//ign_bazel:utilities",
            "//ign_common",
            "//ign_common/events",
            "//ign_common/graphics",
            "//ign_common/profiler",
            "//ign_fuel_tools",
            "//ign_gazebo",
            "//ign_gui",
            "//ign_math/eigen3",
            "//ign_msgs",
            "//ign_physics",
            "//ign_physics:mesh",
            "//ign_physics:sdf",
            "//ign_plugin",
            "//ign_plugin/register",
            "//ign_rendering",
            "//ign_sensors",
            "//ign_transport",
            "//ign_transport/log",
            "//sdformat",
        ],
    )
    for system in systems
]

cc_library(
    name = "ign_gazebo_systems",
    deps = [
               "//ign_gazebo/src/gui/plugins:libGzScene3D.so",
               "//ign_gazebo/src/gui/plugins:libComponentInspector.so",
               "//ign_gazebo/src/gui/plugins:libEntityTree.so",
               "//ign_gazebo/src/gui/plugins:libTransformControl.so",
               "//ign_gazebo/src/gui/plugins:IgnGazebo/libEntityContextMenu.so",
           ] + [":libignition-gazebo-%s-system.so" % system.replace("_", "-") for system in systems] +
           [":libignition-gazebo4-%s-system.so" % system.replace("_", "-") for system in systems],
)

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src] + private_headers,
    deps = [
        ":ign_gazebo_systems",
        "//ign_bazel:utilities",
        "//ign_common",
        "//ign_common/events",
        "//ign_common/graphics",
        "//ign_common/profiler",
        "//ign_fuel_tools",
        "//ign_gazebo",
        "//ign_gazebo/test:test_systems",
        "//ign_gazebo/test:test_utils",
        "//ign_gui",
        "//ign_math/eigen3",
        "//ign_msgs",
        "//ign_physics",
        "//ign_physics:mesh",
        "//ign_physics:sdf",
        "//ign_plugin",
        "//ign_plugin/loader",
        "//ign_plugin/register",
        "//ign_rendering",
        "//ign_sensors",
        "//ign_transport",
        "//ign_transport/log",
        "//sdformat",
        "@gtest",
        "@gtest//:gtest_main",
    ],
) for src in test_sources]

exports_files([
    "src/CMakeLists.txt",
    "src/cmd/cmdgazebo.rb.in",
])
